version: "3.8"

services:
  # === Master Eligible Nodes ===
  es-master-1:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.13.4
    container_name: es-master-1
    environment:
      - node.name=es-master-1-node
      - cluster.name=dev-cluster
      - node.roles=master
      - discovery.seed_hosts=es-master-1,es-master-2,es-master-3
      - cluster.initial_master_nodes=es-master-1-node,es-master-2-node,es-master-3-node
      - bootstrap.memory_lock=true
      - xpack.security.enabled=false
      - network.host=0.0.0.0
      - http.port=9200
      - ES_JAVA_OPTS=-Xms768m -Xmx768m
    ulimits:
      { memlock: { soft: -1, hard: -1 }, nofile: { soft: 65535, hard: 65535 } }
    networks: [elastic-net]
    healthcheck:
      {
        test:
          [
            "CMD-SHELL",
            "curl -s http://localhost:9200/_cluster/health?local=true | grep -q '\"status\":\"\\(green\\|yellow\\)\"'",
          ],
        interval: 10s,
        timeout: 5s,
        retries: 3,
      }

  es-master-2:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.13.4
    container_name: es-master-2
    environment:
      - node.name=es-master-2-node
      - cluster.name=dev-cluster
      - node.roles=master
      - discovery.seed_hosts=es-master-1,es-master-2,es-master-3
      - cluster.initial_master_nodes=es-master-1-node,es-master-2-node,es-master-3-node
      - bootstrap.memory_lock=true
      - xpack.security.enabled=false
      - network.host=0.0.0.0
      - http.port=9200
      - ES_JAVA_OPTS=-Xms768m -Xmx768m
    ulimits:
      { memlock: { soft: -1, hard: -1 }, nofile: { soft: 65535, hard: 65535 } }
    networks: [elastic-net]
    healthcheck:
      {
        test:
          [
            "CMD-SHELL",
            "curl -s http://localhost:9200/_cluster/health?local=true | grep -q '\"status\":\"\\(green\\|yellow\\)\"'",
          ],
        interval: 10s,
        timeout: 5s,
        retries: 3,
      }

  es-master-3:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.13.4
    container_name: es-master-3
    environment:
      - node.name=es-master-3-node
      - cluster.name=dev-cluster
      - node.roles=master
      - discovery.seed_hosts=es-master-1,es-master-2,es-master-3
      - cluster.initial_master_nodes=es-master-1-node,es-master-2-node,es-master-3-node
      - bootstrap.memory_lock=true
      - xpack.security.enabled=false
      - network.host=0.0.0.0
      - http.port=9200
      - ES_JAVA_OPTS=-Xms768m -Xmx768m
    ulimits:
      { memlock: { soft: -1, hard: -1 }, nofile: { soft: 65535, hard: 65535 } }
    networks: [elastic-net]
    healthcheck:
      {
        test:
          [
            "CMD-SHELL",
            "curl -s http://localhost:9200/_cluster/health?local=true | grep -q '\"status\":\"\\(green\\|yellow\\)\"'",
          ],
        interval: 10s,
        timeout: 5s,
        retries: 3,
      }

  # === Data Nodes ===
  # Data nodes implicitly act as coordinating nodes when requests are sent to them
  es-data-1:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.13.4
    container_name: es-data-1
    environment:
      - node.name=es-data-1-node
      - cluster.name=dev-cluster
      - node.roles=data
      - discovery.seed_hosts=es-master-1,es-master-2,es-master-3
      - bootstrap.memory_lock=true
      - xpack.security.enabled=false
      - network.host=0.0.0.0
      - http.port=9200
      - ES_JAVA_OPTS=-Xms768m -Xmx768m
    ports:
      - "9200:9200" # Expose this data node's HTTP port to the host on 9200
    ulimits:
      { memlock: { soft: -1, hard: -1 }, nofile: { soft: 65535, hard: 65535 } }
    volumes:
      - esdata1:/usr/share/elasticsearch/data
    networks: [elastic-net]
    healthcheck:
      {
        test:
          [
            "CMD-SHELL",
            "curl -s http://localhost:9200/_cluster/health?local=true | grep -q '\"status\":\"\\(green\\|yellow\\)\"'",
          ],
        interval: 10s,
        timeout: 5s,
        retries: 3,
      }

  es-data-2:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.13.4
    container_name: es-data-2
    environment:
      - node.name=es-data-2-node
      - cluster.name=dev-cluster
      - node.roles=data
      - discovery.seed_hosts=es-master-1,es-master-2,es-master-3
      - bootstrap.memory_lock=true
      - xpack.security.enabled=false
      - network.host=0.0.0.0
      - http.port=9200
      - ES_JAVA_OPTS=-Xms768m -Xmx768m
    # ports: # Not exposing this one by default, but you could add e.g., "9201:9200"
    ulimits:
      { memlock: { soft: -1, hard: -1 }, nofile: { soft: 65535, hard: 65535 } }
    volumes:
      - esdata2:/usr/share/elasticsearch/data
    networks: [elastic-net]
    healthcheck:
      {
        test:
          [
            "CMD-SHELL",
            "curl -s http://localhost:9200/_cluster/health?local=true | grep -q '\"status\":\"\\(green\\|yellow\\)\"'",
          ],
        interval: 10s,
        timeout: 5s,
        retries: 3,
      }

  es-data-3:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.13.4
    container_name: es-data-3
    environment:
      - node.name=es-data-3-node
      - cluster.name=dev-cluster
      - node.roles=data
      - discovery.seed_hosts=es-master-1,es-master-2,es-master-3
      - bootstrap.memory_lock=true
      - xpack.security.enabled=false
      - network.host=0.0.0.0
      - http.port=9200
      - ES_JAVA_OPTS=-Xms768m -Xmx768m
    # ports: # Not exposing this one by default, but you could add e.g., "9202:9200"
    ulimits:
      { memlock: { soft: -1, hard: -1 }, nofile: { soft: 65535, hard: 65535 } }
    volumes:
      - esdata3:/usr/share/elasticsearch/data
    networks: [elastic-net]
    healthcheck:
      {
        test:
          [
            "CMD-SHELL",
            "curl -s http://localhost:9200/_cluster/health?local=true | grep -q '\"status\":\"\\(green\\|yellow\\)\"'",
          ],
        interval: 10s,
        timeout: 5s,
        retries: 3,
      }

  # === Ingest Nodes ===
  es-ingest-1:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.13.4
    container_name: es-ingest-1
    environment:
      - node.name=es-ingest-1-node
      - cluster.name=dev-cluster
      - node.roles=ingest
      - discovery.seed_hosts=es-master-1,es-master-2,es-master-3
      - bootstrap.memory_lock=true
      - xpack.security.enabled=false
      - network.host=0.0.0.0
      - http.port=9200
      - ES_JAVA_OPTS=-Xms768m -Xmx768m
    ulimits:
      { memlock: { soft: -1, hard: -1 }, nofile: { soft: 65535, hard: 65535 } }
    networks: [elastic-net]
    healthcheck:
      {
        test:
          [
            "CMD-SHELL",
            "curl -s http://localhost:9200/_cluster/health?local=true | grep -q '\"status\":\"\\(green\\|yellow\\)\"'",
          ],
        interval: 10s,
        timeout: 5s,
        retries: 3,
      }

  es-ingest-2:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.13.4
    container_name: es-ingest-2
    environment:
      - node.name=es-ingest-2-node
      - cluster.name=dev-cluster
      - node.roles=ingest
      - discovery.seed_hosts=es-master-1,es-master-2,es-master-3
      - bootstrap.memory_lock=true
      - xpack.security.enabled=false
      - network.host=0.0.0.0
      - http.port=9200
      - ES_JAVA_OPTS=-Xms768m -Xmx768m
    ulimits:
      { memlock: { soft: -1, hard: -1 }, nofile: { soft: 65535, hard: 65535 } }
    networks: [elastic-net]
    healthcheck:
      {
        test:
          [
            "CMD-SHELL",
            "curl -s http://localhost:9200/_cluster/health?local=true | grep -q '\"status\":\"\\(green\\|yellow\\)\"'",
          ],
        interval: 10s,
        timeout: 5s,
        retries: 3,
      }

  # === Kibana ===
  kibana:
    image: docker.elastic.co/kibana/kibana:8.13.4
    container_name: kibana
    environment:
      # Point Kibana directly to the data nodes (using internal service names)
      - ELASTICSEARCH_HOSTS=["http://es-data-1:9200","http://es-data-2:9200","http://es-data-3:9200"]
      - SERVER_HOST=0.0.0.0
      - XPACK_SECURITY_ENABLED=false
    ports:
      - "5601:5601"
    depends_on: # Wait for data node containers to start (not guarantee readiness)
      es-data-1: { condition: service_started }
      es-data-2: { condition: service_started }
      es-data-3: { condition: service_started }
      # If Kibana fails initially, might need to wait for healthy state
      # es-data-1: { condition: service_healthy }
      # es-data-2: { condition: service_healthy }
      # es-data-3: { condition: service_healthy }
    networks:
      - elastic-net

volumes:
  esdata1:
    driver: local
  esdata2:
    driver: local
  esdata3:
    driver: local

networks:
  elastic-net:
    driver: bridge
