version: "2.2" # Keeping v2.2 to match the original example's syntax like mem_limit

# Define common Elasticsearch settings using YAML anchors
x-common-es-settings: &common-es-settings
  image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
  volumes:
    - certs:/usr/share/elasticsearch/config/certs # Shared cert volume
  environment:
    - cluster.name=${CLUSTER_NAME}
    # List ALL nodes expected for the very first master election
    - cluster.initial_master_nodes=es01,es02,es03,es04,es05,es06,es07
    - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
    - bootstrap.memory_lock=true
    - xpack.security.enabled=true
    - xpack.security.http.ssl.enabled=true
    - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
    - xpack.security.transport.ssl.enabled=true
    - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
    - xpack.security.transport.ssl.verification_mode=certificate
    - xpack.license.self_generated.type=${LICENSE}
    - xpack.ml.use_auto_machine_memory_percent=true # Added from original example
  mem_limit: ${MEM_LIMIT}
  ulimits: &common-ulimits
    memlock:
      soft: -1
      hard: -1
  healthcheck: &common-healthcheck
    test:
      [
        "CMD-SHELL",
        "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
      ]
    interval: 10s
    timeout: 10s
    retries: 120

services:
  setup:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
    user: "0"
    command: >
      bash -c '
        if [ x${ELASTIC_PASSWORD} == x ]; then echo "Set ELASTIC_PASSWORD"; exit 1; fi;
        if [ x${KIBANA_PASSWORD} == x ]; then echo "Set KIBANA_PASSWORD"; exit 1; fi;
        if [ ! -f config/certs/ca.zip ]; then
          echo "Creating CA";
          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          unzip config/certs/ca.zip -d config/certs;
        fi;
        if [ ! -f config/certs/certs.zip ]; then
          echo "Creating certs";
          echo -ne \
          "instances:\n"\
          "  - name: es01\n"\
          "    dns: [ es01, localhost ]\n"\
          "    ip: [ 127.0.0.1 ]\n"\
          "  - name: es02\n"\
          "    dns: [ es02, localhost ]\n"\
          "    ip: [ 127.0.0.1 ]\n"\
          "  - name: es03\n"\
          "    dns: [ es03, localhost ]\n"\
          "    ip: [ 127.0.0.1 ]\n"\
          "  - name: es04\n"\
          "    dns: [ es04, localhost ]\n"\
          "    ip: [ 127.0.0.1 ]\n"\
          "  - name: es05\n"\
          "    dns: [ es05, localhost ]\n"\
          "    ip: [ 127.0.0.1 ]\n"\
          "  - name: es06\n"\
          "    dns: [ es06, localhost ]\n"\
          "    ip: [ 127.0.0.1 ]\n"\
          "  - name: es07\n"\
          "    dns: [ es07, localhost ]\n"\
          "    ip: [ 127.0.0.1 ]\n"\
          > config/certs/instances.yml;
          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          unzip config/certs/certs.zip -d config/certs;
        fi;
        echo "Setting file permissions";
        chown -R root:root config/certs;
        find . -type d -exec chmod 750 \{\} \;;
        find . -type f -exec chmod 640 \{\} \;;
        echo "Waiting for Elasticsearch availability (es01)";
        until curl -s --cacert config/certs/ca/ca.crt https://es01:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
        echo "Setting kibana_system password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://es01:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
        echo "All setup tasks done!";
      '
    healthcheck:
      test: ["CMD-SHELL", "[ -f config/certs/es01/es01.crt ]"] # Simple check: Has cert generation run?
      interval: 1s
      timeout: 5s
      retries: 120

  es01:
    <<: *common-es-settings # Include common settings
    depends_on:
      setup: { condition: service_healthy }
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - esdata01:/usr/share/elasticsearch/data # Unique data volume
    ports:
      - ${ES_PORT}:9200 # Expose es01's port
    environment:
      - node.name=es01 # Unique node name
      # Seed discovery from the first few stable nodes
      - discovery.seed_hosts=es02,es03
      # Point to specific certs for this node
      - xpack.security.http.ssl.key=certs/es01/es01.key
      - xpack.security.http.ssl.certificate=certs/es01/es01.crt
      - xpack.security.transport.ssl.key=certs/es01/es01.key
      - xpack.security.transport.ssl.certificate=certs/es01/es01.crt
    ulimits: *common-ulimits
    healthcheck: *common-healthcheck

  es02:
    <<: *common-es-settings
    depends_on: [es01] # Simple dependency on previous node
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - esdata02:/usr/share/elasticsearch/data
    environment:
      - node.name=es02
      - discovery.seed_hosts=es01,es03
      - xpack.security.http.ssl.key=certs/es02/es02.key
      - xpack.security.http.ssl.certificate=certs/es02/es02.crt
      - xpack.security.transport.ssl.key=certs/es02/es02.key
      - xpack.security.transport.ssl.certificate=certs/es02/es02.crt
    ulimits: *common-ulimits
    healthcheck: *common-healthcheck

  es03:
    <<: *common-es-settings
    depends_on: [es02]
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - esdata03:/usr/share/elasticsearch/data
    environment:
      - node.name=es03
      - discovery.seed_hosts=es01,es02
      - xpack.security.http.ssl.key=certs/es03/es03.key
      - xpack.security.http.ssl.certificate=certs/es03/es03.crt
      - xpack.security.transport.ssl.key=certs/es03/es03.key
      - xpack.security.transport.ssl.certificate=certs/es03/es03.crt
    ulimits: *common-ulimits
    healthcheck: *common-healthcheck

  kibana:
    depends_on: # Wait for all ES nodes to be healthy
      es01: { condition: service_healthy }
      es02: { condition: service_healthy }
      es03: { condition: service_healthy }
      es04: { condition: service_healthy }
      es05: { condition: service_healthy }
      es06: { condition: service_healthy }
      es07: { condition: service_healthy }
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
    volumes:
      - certs:/usr/share/kibana/config/certs # Mount CA cert for Kibana
      - kibanadata:/usr/share/kibana/data # Kibana data volume
    ports:
      - ${KIBANA_PORT}:5601
    environment:
      - SERVERNAME=kibana
      - ELASTICSEARCH_HOSTS=https://es01:9200 # Point to es01 (it will coordinate)
      - ELASTICSEARCH_USERNAME=kibana_system # Use the dedicated user
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD} # Use password set by setup
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt # Trust the generated CA
    mem_limit: ${MEM_LIMIT} # Apply mem limit to Kibana too
    healthcheck:
      test: [
          "CMD-SHELL",
          "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
        ] # Check for Kibana redirect
      interval: 10s
      timeout: 10s
      retries: 120

volumes:
  certs: { driver: local }
  esdata01: { driver: local }
  esdata02: { driver: local }
  esdata03: { driver: local }
  esdata04: { driver: local } # Added volumes for new nodes
  esdata05: { driver: local }
  esdata06: { driver: local }
  esdata07: { driver: local }
  kibanadata: { driver: local }
